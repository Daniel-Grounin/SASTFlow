package com.sast;

import java.util.regex.*;

public class VulnerabilityChecker {
    public static String checkVulnerabilities(String fileContent) {
        StringBuilder report = new StringBuilder();

        // ⚠ SQL Injection (Unsafe Statement execution)
        Pattern sqlPattern = Pattern.compile("Statement\\s+.*executeQuery\\(");
        Matcher sqlMatcher = sqlPattern.matcher(fileContent);
        if (sqlMatcher.find()) {
            report.append("SQL Injection Risk: Uses Statement.executeQuery() without PreparedStatement.\n");
        }

        // ⚠ Hardcoded Credentials (Detect "password =")
        Pattern passwordPattern = Pattern.compile("password\\s*=\\s*\".*\"");
        Matcher passwordMatcher = passwordPattern.matcher(fileContent);
        if (passwordMatcher.find()) {
            report.append("Hardcoded Password Found: Avoid storing passwords in source code.\n");
        }

        // ⚠ Insecure File Handling (`File` accessing sensitive files)
        Pattern filePattern = Pattern.compile("new\\s+File\\(\".*\"\\)");
        Matcher fileMatcher = filePattern.matcher(fileContent);
        if (fileMatcher.find()) {
            report.append("Insecure File Handling: Avoid using File() to access sensitive files.\n");
        }

        return report.toString();
    }
}
